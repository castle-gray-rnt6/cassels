{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-cd93748c-dc5d-48f5-8356-cb68998687fd.json","kernel":"sage-10.6","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_backend_state":1758051992039,"last_ipynb_save":1758052002875,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.5"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1758051996622,"exec_count":1,"id":"2cf71d","input":"load(\"utils.sage\")","kernel":"sage-10.6","pos":1,"start":1758051993725,"state":"done","type":"cell"}
{"cell_type":"code","end":1758051996931,"exec_count":2,"id":"859420","input":"# The integer involves zeta_5 and zeta_4.\n# The LCM of 5 and 4 is 20, so we work in the 20th cyclotomic field.\nK = CyclotomicField(20)\nz = K.gen()\n\n# Express zeta_5 and zeta_4 in terms of the generator z = zeta_20\nz5 = z^4  # zeta_20^4 = zeta_5\nz4 = z^5  # zeta_20^5 = zeta_4\n\n# Construct the integer 'a'\na = (z5 + z5^4) + (z5^2 + z5^3)*z4\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the result\nprint(f\"The original element is: (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)ζ₄\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\n\n","kernel":"sage-10.6","output":{"0":{"name":"stdout","text":"The original element is: (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)ζ₄\nMinimal Level (N): 20\nCanonical Minimal Polynomial: x^4 - 2*x^3 + 2*x^2 - 6*x + 9\n"}},"pos":4,"start":1758051996713,"state":"done","type":"cell"}
{"cell_type":"code","end":1758052002002,"exec_count":3,"id":"d18ea9","input":"# The integer involves sqrt(10) and i*sqrt(2).\n# This requires sqrt(5) and sqrt(2), so we need zeta_5 and zeta_8.\n# The LCM of 5 and 8 is 40, so we work in the 40th cyclotomic field.\nK = CyclotomicField(40)\nz = K.gen()\n\n# Express zeta_5 and zeta_8 in terms of the generator z = zeta_40\nz5 = z^8  # zeta_40^8 = zeta_5\nz8 = z^5  # zeta_40^5 = zeta_8\n\n# Construct the necessary components from roots of unity\n# Note: i*sqrt(2) = zeta_8 - zeta_8^7\ni_sqrt_2 = z8 - z8^7\n# Note: sqrt(5) is the Gauss sum for p=5\nsqrt_5 = z5 - z5^2 - z5^3 + z5^4\n# Note: sqrt(2) = zeta_8 + zeta_8^7\nsqrt_2 = z8 + z8^7\nsqrt_10 = sqrt_2 * sqrt_5\n\n# Construct the integer 'a'\n# The minimal polynomial x^4 - 4*x^2 + 9 = 0 shows this is an algebraic integer.\na = (sqrt_10 + i_sqrt_2) / 2\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the result\nprint(f\"The original element is: 1/2*(sqrt(10) + i*sqrt(2))\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\n","kernel":"sage-10.6","output":{"0":{"name":"stdout","text":"The original element is: 1/2*(sqrt(10) + i*sqrt(2))\nMinimal Level (N): 20\nCanonical Minimal Polynomial: x^4 - 2*x^3 + 2*x^2 - 6*x + 9\n"}},"pos":6,"start":1758052001460,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"b65518","input":"# The number involves roots of unity of order 5.\n# We work in the 5th cyclotomic field.\nK = CyclotomicField(5)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 - z\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 - ζ₅\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 - ζ₅\nExpressed as a cyclotomic integer: -zeta5 + 1\nMinimal Level (N): 5\nCanonical Minimal Polynomial: x^4 - 5*x^3 + 10*x^2 - 10*x + 5\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"d1a01f","input":"# The integer involves zeta_21.\n# We work in the 21st cyclotomic field.\nK = CyclotomicField(21)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 - z - z^13\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 - ζ₂₁ - ζ₂₁¹³\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 - ζ₂₁ - ζ₂₁¹³\nMinimal Level (N): 21\nCanonical Minimal Polynomial: x^6 - 5*x^5 + 13*x^4 - 22*x^3 + 28*x^2 - 21*x + 7\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"8853f3","input":"# The number can be expressed using roots of unity:\n# 2*cos(2*pi/7) = zeta_7 + zeta_7^6\n# (1+i*sqrt(3))/2 = zeta_6\n# The LCM of 7 and 6 is 42, so we work in the 42nd cyclotomic field.\nK = CyclotomicField(42)\nz = K.gen()\n\n# Express zeta_7 and zeta_6 in terms of the generator z = zeta_42\nz7 = z^6  # zeta_42^6 = zeta_7\nz6 = z^7  # zeta_42^7 = zeta_6\n\n# Construct the integer 'a'\na = (z7 + z7^6) + z6\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 2*cos(2*pi/7) + (1+i*sqrt(3))/2\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 2*cos(2*pi/7) + (1+i*sqrt(3))/2\nExpressed as a cyclotomic integer: -zeta42^8 + zeta42^7 + zeta42^6 + zeta42\nMinimal Level (N): 21\nCanonical Minimal Polynomial: x^6 - 5*x^5 + 13*x^4 - 22*x^3 + 28*x^2 - 21*x + 7\n"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"0ae28d","input":"# The number involves roots of unity of order 11.\n# We work in the 11th cyclotomic field.\nK = CyclotomicField(11)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 + z + z^2 + z^4 + z^7\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 + ζ₁₁ + ζ₁₁² + ζ₁₁⁴ + ζ₁₁⁷\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 + ζ₁₁ + ζ₁₁² + ζ₁₁⁴ + ζ₁₁⁷\nMinimal Level (N): 11\nCanonical Minimal Polynomial: x^2 - x + 3\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"1c801f","input":"# The number involves i*sqrt(11), which is related to the Gauss sum for p=11.\n# The field Q(sqrt(-11)) is a subfield of the 11th cyclotomic field.\n# We work in the 11th cyclotomic field.\nK = CyclotomicField(11)\nz = K.gen()\n\n# Construct the integer 'a' using the quadratic Gauss sum.\n# The Gauss sum for p=11 is i*sqrt(11).\ni_sqrt_11 = sum(kronecker(k, 11) * z^k for k in range(1, 11))\na = (1 + i_sqrt_11) / 2\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: (1 + i*sqrt(11))/2\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: (1 + i*sqrt(11))/2\nMinimal Level (N): 11\nCanonical Minimal Polynomial: x^2 - x + 3\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"589364","input":"# The number involves roots of unity of order 13.\n# We work in the 13th cyclotomic field.\nK = CyclotomicField(13)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 + z + z^3 + z^9\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 + ζ₁₃ + ζ₁₃³ + ζ₁₃⁹\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 + ζ₁₃ + ζ₁₃³ + ζ₁₃⁹\nMinimal Level (N): 13\nCanonical Minimal Polynomial: x^4 - 3*x^3 + 5*x^2 - 9*x + 9\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"62a130","input":"# 1. Define the number in the field of algebraic numbers (QQbar).\na_radical = (3 + sqrt(QQbar(13)) + I * sqrt(26 - 6*sqrt(QQbar(13)))) / 4\n\n# 2. Find its minimal polynomial over the rational numbers.\nmin_poly_a = a_radical.minpoly()\n\n# 3. Create a number field from this polynomial.\nK.<a> = NumberField(min_poly_a)\n\n# 4. The conductor of this field is the smallest N for which the number\n#    can be represented in the N-th cyclotomic field.\n#    The Kronecker-Weber theorem ensures this works for abelian number fields.\ntry:\n    N = K.conductor()\n    \n    # 5. Embed the abstract number 'a' into the concrete cyclotomic field Q(zeta_N).\n    #    There are multiple valid embeddings; the hash function will produce the\n    #    same canonical result regardless of which one we choose.\n    KN.<z> = CyclotomicField(N)\n    a_cyclotomic = K.embeddings(KN)[0](a)\n\n    # 6. Now, calculate the hash using the correct cyclotomic representation.\n    level, canonical_min_poly = cyclotomic_hash(a_cyclotomic)\n\n    # Print the results\n    print(f\"The original element is: (3+sqrt(13) + i*sqrt(26-6*sqrt(13)))/4\")\n    print(f\"Its minimal polynomial is: {min_poly_a}\")\n    print(f\"The number is cyclotomic and its conductor is {N}.\")\n    print(f\"Minimal Level (N): {level}\")\n    print(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n\nexcept (NotImplementedError, ValueError):\n    print(f\"The number defined by the minimal polynomial {min_poly_a} is not a cyclotomic integer.\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: (3+sqrt(13) + i*sqrt(26-6*sqrt(13)))/4\nIts minimal polynomial is: x^4 - 3*x^3 + 5*x^2 - 9*x + 9\nThe number is cyclotomic and its conductor is 13.\nMinimal Level (N): 13\nCanonical Minimal Polynomial: x^4 - 3*x^3 + 5*x^2 - 9*x + 9\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"2c97b8","input":"# The integer involves zeta_35.\n# We work in the 35th cyclotomic field.\nK = CyclotomicField(35)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 - z + z^7 - z^11 - z^16\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 - ζ₃₅ + ζ₃₅⁷ - ζ₃₅¹¹ - ζ₃₅¹⁶\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 - ζ₃₅ + ζ₃₅⁷ - ζ₃₅¹¹ - ζ₃₅¹⁶\nMinimal Level (N): 35\nCanonical Minimal Polynomial: x^4 + x^2 + 9\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"d087f6","input":"# The number involves sqrt(5) (from Q(zeta_5)) and i*sqrt(7) (from Q(zeta_7)).\n# The LCM of 5 and 7 is 35, so we work in the 35th cyclotomic field.\nK = CyclotomicField(35)\nz = K.gen()\n\n# Express zeta_5 and zeta_7 in terms of the generator z = zeta_35\nz5 = z^7  # zeta_35^7 = zeta_5\nz7 = z^5  # zeta_35^5 = zeta_7\n\n# Construct the integer 'a' using quadratic Gauss sums.\n# sqrt(5) = z5 + z5^4 - z5^2 - z5^3\nsqrt_5 = sum(kronecker(k, 5) * z5^k for k in range(1, 5))\n# i*sqrt(7) = sum of (k/7)*z7^k\ni_sqrt_7 = sum(kronecker(k, 7) * z7^k for k in range(1, 7))\n\na = (sqrt_5 + i_sqrt_7) / 2\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1/2*(sqrt(5) + i*sqrt(7))\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1/2*(sqrt(5) + i*sqrt(7))\nExpressed as a cyclotomic integer: -zeta35^21 + zeta35^20 - zeta35^14 + zeta35^10 + zeta35^5\nMinimal Level (N): 35\nCanonical Minimal Polynomial: x^4 + x^2 + 9\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"a15f54","input":"# The number involves roots of unity of order 7.\n# We work in the 7th cyclotomic field.\nK = CyclotomicField(7)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 + z + z^3\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 + ζ₇ + ζ₇³\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 + ζ₇ + ζ₇³\nExpressed as a cyclotomic integer: zeta7^3 + zeta7 + 1\nMinimal Level (N): 7\nCanonical Minimal Polynomial: x^2 - x + 2\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"122f35","input":"# The number involves i*sqrt(7), which is related to the Gauss sum for p=7.\n# The field Q(sqrt(-7)) is a subfield of the 7th cyclotomic field.\n# We work in the 7th cyclotomic field.\nK = CyclotomicField(7)\nz = K.gen()\n\n# Construct the integer 'a' using the quadratic Gauss sum.\ni_sqrt_7 = sum(kronecker(k, 7) * z^k for k in range(1, 7))\na = (1 + i_sqrt_7) / 2\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1/2*(1 + i*sqrt(7))\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1/2*(1 + i*sqrt(7))\nExpressed as a cyclotomic integer: zeta7^4 + zeta7^2 + zeta7 + 1\nMinimal Level (N): 7\nCanonical Minimal Polynomial: x^2 - x + 2\n"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"a7319e","input":"# The integer involves zeta_5.\n# So we work in the 5th cyclotomic field.\nK = CyclotomicField(5)\nz5 = K.gen()\n\n# Construct the integer 'a'\na = (z5 + z5^4) + (z5^2 + z5^3)\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the result\nprint(f\"The original element is: (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)\nMinimal Level (N): 1\nCanonical Minimal Polynomial: x - 1\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"ea3c4d","input":"# The number involves roots of unity of order 8.\n# We work in the 8th cyclotomic field.\n# Note that ζ₈ - ζ₈⁻¹ is equal to i\\sqrt{2}\n\nK = CyclotomicField(8)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 + z - z^-1\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 + ζ₈ - ζ₈⁻¹\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 + ζ₈ - ζ₈⁻¹\nExpressed as a cyclotomic integer: zeta8^3 + zeta8 + 1\nMinimal Level (N): 8\nCanonical Minimal Polynomial: x^2 - 2*x + 3\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"074b3d","input":"# The number involves i, which can be written as ζ₁₂ - ζ₁₂⁻¹.\n# So, 1 + i is equivalent to 1 + ζ₁₂ - ζ₁₂⁻¹.\n# We work in the 12th cyclotomic field.\nK = CyclotomicField(12)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 + z - z^-1\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 + i\")\nprint(f\"Which is equivalent to: 1 + ζ₁₂ - ζ₁₂⁻¹\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 + i\nWhich is equivalent to: 1 + ζ₁₂ - ζ₁₂⁻¹\nExpressed as a cyclotomic integer: zeta12^3 + 1\nMinimal Level (N): 4\nCanonical Minimal Polynomial: x^2 - 2*x + 2\n"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"1dd648","input":"# The number involves roots of unity of order 20.\n# We work in the 20th cyclotomic field.\nK = CyclotomicField(20)\nz = K.gen()\n\n# Construct the integer 'a'\na = 1 + z - z^-1\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 + ζ₂₀ - ζ₂₀⁻¹\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 + ζ₂₀ - ζ₂₀⁻¹\nExpressed as a cyclotomic integer: zeta20^7 - zeta20^5 + zeta20^3 + 1\nMinimal Level (N): 20\nCanonical Minimal Polynomial: x^4 - 4*x^3 + 9*x^2 - 10*x + 5\n"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"eb781c","input":"# The number involves i (from Q(zeta_4)) and sqrt(5) (from Q(zeta_5)).\n# The smallest field containing both is the 20th cyclotomic field.\nK = CyclotomicField(20)\n\n# Construct the number using its radical form. Sage can automatically\n# convert this into an element of the specified cyclotomic field.\na_radical = 1 + I * (sqrt(5)+1)/2\na = K(a_radical)\n\n# Calculate the hash\nlevel, canonical_min_poly = cyclotomic_hash(a)\n\n# Print the results\nprint(f\"The original element is: 1 + 1/2*i*(sqrt(5)+1)\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {canonical_min_poly}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1 + 1/2*i*(sqrt(5)+1)\nExpressed as a cyclotomic integer: zeta20^7 + zeta20^3 + 1\nMinimal Level (N): 20\nCanonical Minimal Polynomial: x^4 - 4*x^3 + 9*x^2 - 10*x + 5\n"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"6d5a87","input":"def minimal_level(a, with_zeta=False):\n    \"\"\"\n    INPUT:\n        - A cyclotomic integer.\n        - TYPE: Same type as that of an element in\n          `CyclotomicField(n).ring_of_integers()`.\n    OUTPUT:\n        - The minimal level of the input.\n        - If `with_zeta` is set, also return a root of unity (in the parent of the input)\n        - TYPE: Integer.\n\n    AUTHOR: Toinou, Kiran\n    \"\"\"\n    # Create some objects:\n    K = a.parent().fraction_field()\n    # TODO: What is the cost of the conductor computation?\n    N = K.conductor()\n    roots = K.roots_of_unity()\n\n    # Captain obvious\n    if a in QQ:\n        return (1, K(1)) if with_zeta else 1\n\n    # Outer loop: prime factors p of N:\n    for p, _ in factor(N):\n        d = N//4 if (p == 2 and N%8 == 4) else N//p\n        Kd = CyclotomicField(d)\n        # Inner loop: roots of unity\n        for zeta in roots[:p]:\n            # TODO: Check how Sage does this membership test\n            if zeta * a in Kd:\n                # Reduce the level and recurse\n                ans = minimal_level(Kd(zeta * a), with_zeta)\n                return (ans[0], K(ans[1])*zeta) if with_zeta else ans\n    # If none of the above, then N\n    return (N, K(1)) if with_zeta else N\n\ndef cyclotomic_hash(a):\n    \"\"\"\n    INPUT:\n        - A cyclotomic integer.\n        - TYPE: Same type as that of an element in\n          `CyclotomicField(n).ring_of_integers()`.\n    OUTPUT:\n        - The minimal level of the input, and the minimal polynomial of a \"canonical\" representative of the equivalence class.\n        - TYPE: Integer; polynomial with integer coefficients.\n\n    AUTHOR: Kiran\n    \"\"\"\n    # Force a into minimal level\n    N, z0 = minimal_level(a, with_zeta=True)\n    K.<z> = CyclotomicField(N)\n    b = K(a*z0)\n    # Minimize the degree of the minimal polynomial, breaking ties in favor of the lexicographically earlier polynomial\n    # (with coefficients read from highest order to lowest order).\n    d = None\n    roots = K.roots_of_unity()\n    for zeta in roots:\n        pol = (b*zeta).minpoly()\n        if (d is None) or (pol.degree() < d.degree()) or (pol.degree() == d.degree() and list(pol.reverse()) < list(d.reverse())):\n            d = pol\n    return N, d\n\ndef is_cassels_form(a, hash0=None):\n    \"\"\"\n    INPUT:\n        - A cyclotomic integer.\n        - TYPE: Same type as that of an element in\n          `CyclotomicField(n).ring_of_integers()`.\n    OUTPUT:\n        - True if the input appears in one of Cassels's infinite families.\n        - TYPE: Boolean.\n\n    AUTHOR: Kiran\n    \"\"\"\n    # Test whether a is a sum of at most two roots of unity.\n    K = a.parent()\n    roots = K.roots_of_unity()\n    if a == 0 or a.multiplicative_order() < Infinity or any((a-z).multiplicative_order() < Infinity for z in roots):\n        return True\n    # Test whether the castle of a has the right form for one of the other Cassels families.\n    u = a*a.conjugate()\n    P.<z> = K[]\n    l = (z^2 + (u-3)*z + 1).roots(K)\n    if len(l) == 0:\n        return False\n    z1 = l[0][0]\n    if z1.multiplicative_order() == Infinity:\n        return False\n    # Test whether a is equivalent to 1 + z2 - 1/z2 for z2 = sqrt(z1).\n    hash1 = cyclotomic_hash(a) if hash0 is None else hash0\n    _, z2 = z1.is_square(root=True)\n    if _ and hash1 == cyclotomic_hash(1+z2-1/z2):\n        return True\n    # Test whether a is equivalent to (z5+z5^4) + (z5^2+z5^3)*z1.\n    K5.<z5> = CyclotomicField(5)\n    if hash1[0] % 5 == 0 and hash1 == cyclotomic_hash((z5+z5^4) + (z5^2+z5^3)*z1):\n        return True\n    return False\n","metadata":{"jupyter":{"source_hidden":true}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d6f7c2","input":"\n\n# The integer involves zeta_5 and zeta_6.\n# The LCM of 5 and 6 is 30, so we work in the 30th cyclotomic field.\nK = CyclotomicField(30)\nz = K.gen()\n\n# Express zeta_5 and zeta_6 in terms of the generator z = zeta_30\nz5 = z^6  # zeta_30^6 = zeta_5\nz6 = z^5  # zeta_30^5 = zeta_6\n\n# Construct the integer 'a'\na = (z5 + z5^4) + (z5^2 + z5^3)*z6\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the result\nprint(f\"The original element is: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: -zeta30^5 - zeta30^4 + zeta30\nMinimal Level (N): 15\nCanonical Minimal Polynomial: x^4 - 3*x^3 + 5*x^2 - 6*x + 4\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"da7f2b","input":"\n\n# The integer involves sqrt(5) (from zeta_5) and i*sqrt(3) (from zeta_6).\n# The LCM of 5 and 6 is 30, so we work in the 30th cyclotomic field.\nK = CyclotomicField(30)\nz = K.gen()\n\n# Express zeta_5 and zeta_6 in terms of the generator z = zeta_30\nz5 = z^6  # zeta_30^6 = zeta_5\nz6 = z^5  # zeta_30^5 = zeta_6\n\n# We can express the number as a cyclotomic integer:\n# 1/2*(sqrt(5) + i*sqrt(3)) = (zeta_5 + zeta_5^4) + zeta_6\na = (z5 + z5^4) + z6\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# Print the result\nprint(f\"The original element is: 1/2*(sqrt(5) + i*sqrt(3))\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: 1/2*(sqrt(5) + i*sqrt(3))\nMinimal Level (N): 15\nCanonical Minimal Polynomial: x^4 - 3*x^3 + 5*x^2 - 6*x + 4\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"71663b","input":"# The integer involves zeta_5 and zeta_10.\n# The LCM of 5 and 10 is 10, so we work in the 10th cyclotomic field.\nK = CyclotomicField(10)\nz = K.gen()\n\n# Express zeta_5 and zeta_10 in terms of the generator z = zeta_10\nz5 = z^2  # zeta_10^2 = zeta_5\nz10 = z\n\n# Construct the integer 'a'\na = (z5 + z5^4) + (z5^2 + z5^3)*z10\n\n# Calculate the hash\nlevel, min_poly = cyclotomic_hash(a)\n\n# --- Directly check if 'a' is a sum of two roots of unity ---\n# The logic is: if a = z1 + z2, then a - z1 = z2.\n# So we check if (a - z) is a root of unity for any root of unity z in the field.\nfield_roots = a.parent().roots_of_unity()\nis_sum = False\nif a == 0 or a.multiplicative_order() < Infinity or any((a-root).multiplicative_order() < Infinity for root in field_roots):\n    is_sum = True\n\n# Print the results\nprint(f\"The original element is: (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)ζ₁₀\")\nprint(f\"Expressed as a cyclotomic integer: {a}\")\nprint(f\"Minimal Level (N): {level}\")\nprint(f\"Canonical Minimal Polynomial: {min_poly}\")\nprint(f\"Is the element a sum of two roots of unity? {is_sum}\")\n\n","output":{"0":{"name":"stdout","output_type":"stream","text":"The original element is: (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)ζ₁₀\nExpressed as a cyclotomic integer: -zeta10^3 - 1\nMinimal Level (N): 5\nCanonical Minimal Polynomial: x^4 - 5*x^3 + 10*x^2 - 10*x + 5\nIs the element a sum of two roots of unity? True\n"}},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"02495f","input":"--- Calculation for the specific integer 1/2*(sqrt(5) + i*sqrt(7)) ---","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"152ffb","input":"--- Calculation for the specific integer 1 + ζ₇ + ζ₇³ ---","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"227df3","input":"--- Calculation for the specific integer (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)ζ₆ ---","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"258dc8","input":"--- Calculation for the specific integer (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³) ---","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"29cfd8","input":" --- Calculation for the specific integer 1 + ζ₈ - ζ₈⁻¹ ---","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"2ea37a","input":"--- Calculation for the specific integer 1/2*(sqrt(5) + i*sqrt(3)) ---","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"484abb","input":"--- Calculation for the specific integer (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)ζ₁₀ ---","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"523ea5","input":" --- Calculation for the specific integer (ζ₅+ζ₅⁴) + (ζ₅²+ζ₅³)ζ₄ ---\n\n","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"5af213","input":" --- Calculation for the specific integer 1 + ζ₁₃ + ζ₁₃³ + ζ₁₃⁹ ---","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"6bb5d3","input":"--- Calculation for the specific integer 1/2*(1 + i*sqrt(7)) ---","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"819329","input":"--- Calculation for the specific integer (3+sqrt(13) + i*sqrt(26-6*sqrt(13)))/4 ---","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"8fe4be","input":"--- Calculation for the specific integer 1 + ζ₁₁ + ζ₁₁² + ζ₁₁⁴ + ζ₁₁⁷ ---","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"908d43","input":"--- Calculation for the specific integer 1/2*(sqrt(10) + i*sqrt(2)) ---","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"98cc35","input":"--- Calculation for the specific integer 1 + ζ₂₀ - ζ₂₀⁻¹ ---","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"995c82","input":"We compute the cyclotomic hashes from the proof of Corollary 4.5.","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"a6a341","input":"--- Calculation for the specific integer 1 + 1/2*i*(sqrt(5)+1) ---\n","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"ae42a0","input":"--- Calculation for the specific integer 1 - ζ₂₁ - ζ₂₁¹³ ---","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"af8311","input":"--- Calculation for the specific integer 1 - ζ₃₅ + ζ₃₅⁷ - ζ₃₅¹¹ - ζ₃₅¹⁶ ---\n","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"d764a0","input":"--- Calculation for the specific integer 1 + ζ₁₂ - ζ₁₂⁻¹ ---\n","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"f0bfd4","input":" --- Calculation for the specific integer 2*cos(2*pi/7) + (1+i*sqrt(3))/2 ---","pos":16,"type":"cell"}
{"id":0,"time":1758051971456,"type":"user"}
{"last_load":1757682912264,"type":"file"}